@page "/printgraph"
@layout PrintLayout
@inject IJSRuntime JSRuntime
@inject PrintSetting  prtSetting

@using Infragistics.Blazor.Controls;

@implements IDisposable
<style>
    /* Page Size */
    @("@page { size:" + prtSetting.PageSize + (prtSetting.IsLandscape == "true" ? " landscape" : "") + " } ")
    /* paper.min.css */
    @("@page{margin:0}body{margin:0}.sheet{margin:0;overflow:hidden;position:relative;box-sizing:border-box;page-break-after:always}body.A3 .sheet{width:297mm;height:419mm}body.A3.landscape .sheet{width:420mm;height:296mm}body.A4 .sheet{width:210mm;height:296mm}body.A4.landscape .sheet{width:297mm;height:209mm}body.A5 .sheet{width:148mm;height:209mm}body.A5.landscape .sheet{width:210mm;height:147mm}body.letter .sheet{width:216mm;height:279mm}body.letter.landscape .sheet{width:280mm;height:215mm}body.legal .sheet{width:216mm;height:356mm}body.legal.landscape .sheet{width:357mm;height:215mm}.sheet.padding-10mm{padding:10mm}.sheet.padding-15mm{padding:15mm}.sheet.padding-20mm{padding:20mm}.sheet.padding-25mm{padding:25mm}@media screen{body{background:#e0e0e0}.sheet{background:#fff;box-shadow:0 .5mm 2mm rgba(0,0,0,.3);margin:5mm auto}}@media print{body.A3.landscape{width:420mm}body.A3,body.A4.landscape{width:297mm}body.A4,body.A5.landscape{width:210mm}body.A5{width:148mm}body.legal,body.letter{width:216mm}body.letter.landscape{width:280mm}body.legal.landscape{width:357mm}}")
    /* site.css　スタイルの無効化 */
    @("app{position:initial; display:initial;flex-direction:initial}")
    /* Bootstrap.min.css スタイルの無効化*/
    @("@media print { body { width: 210mm;min-width: auto !important;}}")

    article { border:2px solid; width:100%;height:100%}
</style>

@for (int i = 0; i < int.Parse(prtSetting.Multiple); i++)
{
    <style>
    </style>

    <section class="sheet @prtSetting.Padding">
        <article>
            Page:@(i+1)/@prtSetting.Multiple
            <p>PageSize:@prtSetting.PageSize Landscape:@prtSetting.IsLandscape Padding:@prtSetting.Padding Multiple:@prtSetting.Multiple</p>
            <h1>H1 Contents</h1>
            <CategoryChart ChartType="@SelectedChartType" DataSource="@_datas"
                           ChartTitle="This is the Chart Title" Subtitle="A Chart Subtitle"
                           Width="100%" Height="500px">

            </CategoryChart>
        </article>
    </section>
}

@code{
    public class DataValueItem
    {
        public string Label { get; set; }
        public double Value1 { get; set; }
        public double Value2 { get; set; }
        public double Value3 { get; set; }
        public double Value4 { get; set; }
        public double Value5 { get; set; }
        public double Value6 { get; set; }
        public DataValueItem(string l, double v1, double v2, double v3, double v4, double v5, double v6)
        {
            Label = l;
            Value1 = v1;
            Value2 = v2;
            Value3 = v3;
            Value4 = v4;
            Value5 = v5;
            Value6 = v6;
        }
    }

    public List<DataValueItem> _datas = new List<DataValueItem>();

    CategoryChartType SelectedChartType = CategoryChartType.Line;

    protected override void OnInitialized()
    {
        Func<double> GetVal = () =>
        {
            var r = new Random();
            return (double)r.Next(0, 1000);
        };


        var ds = new DateTime(2020, 01, 01);
        for (int i = 0; i < 12; i++)
        {
            var item = new DataValueItem(ds.AddMonths(i).ToString("yyyy/MM"), GetVal(), GetVal(), GetVal(), GetVal(), GetVal(), GetVal());
            _datas.Add(item);

        }

    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if(firstRender)
        {
            await Task.Delay(1000);
        }

        if (prtSetting.AutoPrint == "Yes")
        {
            await JSRuntime.InvokeAsync<bool>("printwindow", null);
        }
    }

    protected override void OnParametersSet()
    {
        JSRuntime.InvokeAsync<bool>("addClass", new[] { prtSetting.PageSize, prtSetting.IsLandscape });
    }

    void IDisposable.Dispose()
    {
        JSRuntime.InvokeAsync<bool>("removeClass", new[] { prtSetting.PageSize, prtSetting.IsLandscape });
    }


}
